<<<<<<< HEAD
# Generated from SimpAlg.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2&")
        buf.write("\u00df\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\f\3\f")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \7 \u00ae\n \f \16 \u00b1\13 \3!\6!\u00b4\n!\r!")
        buf.write("\16!\u00b5\3\"\6\"\u00b9\n\"\r\"\16\"\u00ba\3\"\3\"\6")
        buf.write("\"\u00bf\n\"\r\"\16\"\u00c0\3#\3#\3#\3#\7#\u00c7\n#\f")
        buf.write("#\16#\u00ca\13#\3#\3#\3$\3$\3$\3$\7$\u00d2\n$\f$\16$\u00d5")
        buf.write("\13$\3$\3$\3%\6%\u00da\n%\r%\16%\u00db\3%\3%\2\2&\3\3")
        buf.write("\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&\3\2\t\5\2")
        buf.write("C\\aac|\6\2\62;C\\aac|\3\2\62;\6\2\f\f\17\17$$^^\b\2$")
        buf.write("$))^^ppttvv\4\2\f\f\17\17\5\2\13\f\17\17\"\"\2\u00e6\2")
        buf.write("\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3")
        buf.write("\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2")
        buf.write("\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2")
        buf.write("\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%")
        buf.write("\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\3K\3\2\2\2\5O\3\2\2\2\7Q\3\2\2\2\tS\3\2\2\2\13[\3\2\2")
        buf.write("\2\r]\3\2\2\2\17a\3\2\2\2\21g\3\2\2\2\23i\3\2\2\2\25o")
        buf.write("\3\2\2\2\27q\3\2\2\2\31s\3\2\2\2\33x\3\2\2\2\35{\3\2\2")
        buf.write("\2\37\u0080\3\2\2\2!\u0086\3\2\2\2#\u0088\3\2\2\2%\u008a")
        buf.write("\3\2\2\2\'\u008c\3\2\2\2)\u008e\3\2\2\2+\u0090\3\2\2\2")
        buf.write("-\u0093\3\2\2\2/\u0097\3\2\2\2\61\u0099\3\2\2\2\63\u009b")
        buf.write("\3\2\2\2\65\u009d\3\2\2\2\67\u00a0\3\2\2\29\u00a3\3\2")
        buf.write("\2\2;\u00a6\3\2\2\2=\u00a9\3\2\2\2?\u00ab\3\2\2\2A\u00b3")
        buf.write("\3\2\2\2C\u00b8\3\2\2\2E\u00c2\3\2\2\2G\u00cd\3\2\2\2")
        buf.write("I\u00d9\3\2\2\2KL\7x\2\2LM\7c\2\2MN\7t\2\2N\4\3\2\2\2")
        buf.write("OP\7}\2\2P\6\3\2\2\2QR\7\177\2\2R\b\3\2\2\2ST\7r\2\2T")
        buf.write("U\7t\2\2UV\7q\2\2VW\7i\2\2WX\7t\2\2XY\7c\2\2YZ\7o\2\2")
        buf.write("Z\n\3\2\2\2[\\\7=\2\2\\\f\3\2\2\2]^\7k\2\2^_\7p\2\2_`")
        buf.write("\7v\2\2`\16\3\2\2\2ab\7h\2\2bc\7n\2\2cd\7q\2\2de\7c\2")
        buf.write("\2ef\7v\2\2f\20\3\2\2\2gh\7?\2\2h\22\3\2\2\2ij\7r\2\2")
        buf.write("jk\7t\2\2kl\7k\2\2lm\7p\2\2mn\7v\2\2n\24\3\2\2\2op\7*")
        buf.write("\2\2p\26\3\2\2\2qr\7+\2\2r\30\3\2\2\2st\7u\2\2tu\7e\2")
        buf.write("\2uv\7c\2\2vw\7p\2\2w\32\3\2\2\2xy\7k\2\2yz\7h\2\2z\34")
        buf.write("\3\2\2\2{|\7g\2\2|}\7n\2\2}~\7u\2\2~\177\7g\2\2\177\36")
        buf.write("\3\2\2\2\u0080\u0081\7y\2\2\u0081\u0082\7j\2\2\u0082\u0083")
        buf.write("\7k\2\2\u0083\u0084\7n\2\2\u0084\u0085\7g\2\2\u0085 \3")
        buf.write("\2\2\2\u0086\u0087\7-\2\2\u0087\"\3\2\2\2\u0088\u0089")
        buf.write("\7/\2\2\u0089$\3\2\2\2\u008a\u008b\7,\2\2\u008b&\3\2\2")
        buf.write("\2\u008c\u008d\7\61\2\2\u008d(\3\2\2\2\u008e\u008f\7\'")
        buf.write("\2\2\u008f*\3\2\2\2\u0090\u0091\7q\2\2\u0091\u0092\7t")
        buf.write("\2\2\u0092,\3\2\2\2\u0093\u0094\7c\2\2\u0094\u0095\7p")
        buf.write("\2\2\u0095\u0096\7f\2\2\u0096.\3\2\2\2\u0097\u0098\7#")
        buf.write("\2\2\u0098\60\3\2\2\2\u0099\u009a\7>\2\2\u009a\62\3\2")
        buf.write("\2\2\u009b\u009c\7@\2\2\u009c\64\3\2\2\2\u009d\u009e\7")
        buf.write(">\2\2\u009e\u009f\7?\2\2\u009f\66\3\2\2\2\u00a0\u00a1")
        buf.write("\7@\2\2\u00a1\u00a2\7?\2\2\u00a28\3\2\2\2\u00a3\u00a4")
        buf.write("\7?\2\2\u00a4\u00a5\7?\2\2\u00a5:\3\2\2\2\u00a6\u00a7")
        buf.write("\7#\2\2\u00a7\u00a8\7?\2\2\u00a8<\3\2\2\2\u00a9\u00aa")
        buf.write("\7.\2\2\u00aa>\3\2\2\2\u00ab\u00af\t\2\2\2\u00ac\u00ae")
        buf.write("\t\3\2\2\u00ad\u00ac\3\2\2\2\u00ae\u00b1\3\2\2\2\u00af")
        buf.write("\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0@\3\2\2\2\u00b1")
        buf.write("\u00af\3\2\2\2\u00b2\u00b4\t\4\2\2\u00b3\u00b2\3\2\2\2")
        buf.write("\u00b4\u00b5\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b5\u00b6\3")
        buf.write("\2\2\2\u00b6B\3\2\2\2\u00b7\u00b9\t\4\2\2\u00b8\u00b7")
        buf.write("\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00b8\3\2\2\2\u00ba")
        buf.write("\u00bb\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00be\7\60\2")
        buf.write("\2\u00bd\u00bf\t\4\2\2\u00be\u00bd\3\2\2\2\u00bf\u00c0")
        buf.write("\3\2\2\2\u00c0\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1")
        buf.write("D\3\2\2\2\u00c2\u00c8\7$\2\2\u00c3\u00c7\n\5\2\2\u00c4")
        buf.write("\u00c5\7^\2\2\u00c5\u00c7\t\6\2\2\u00c6\u00c3\3\2\2\2")
        buf.write("\u00c6\u00c4\3\2\2\2\u00c7\u00ca\3\2\2\2\u00c8\u00c6\3")
        buf.write("\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00cb\3\2\2\2\u00ca\u00c8")
        buf.write("\3\2\2\2\u00cb\u00cc\7$\2\2\u00ccF\3\2\2\2\u00cd\u00ce")
        buf.write("\7\61\2\2\u00ce\u00cf\7\61\2\2\u00cf\u00d3\3\2\2\2\u00d0")
        buf.write("\u00d2\n\7\2\2\u00d1\u00d0\3\2\2\2\u00d2\u00d5\3\2\2\2")
        buf.write("\u00d3\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d6\3")
        buf.write("\2\2\2\u00d5\u00d3\3\2\2\2\u00d6\u00d7\b$\2\2\u00d7H\3")
        buf.write("\2\2\2\u00d8\u00da\t\b\2\2\u00d9\u00d8\3\2\2\2\u00da\u00db")
        buf.write("\3\2\2\2\u00db\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc")
        buf.write("\u00dd\3\2\2\2\u00dd\u00de\b%\2\2\u00deJ\3\2\2\2\13\2")
        buf.write("\u00af\u00b5\u00ba\u00c0\u00c6\u00c8\u00d3\u00db\3\b\2")
        buf.write("\2")
        return buf.getvalue()

=======
# Generated from SimpAlg.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,221,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
        1,28,1,28,1,29,1,29,1,30,1,30,5,30,172,8,30,10,30,12,30,175,9,30,
        1,31,4,31,178,8,31,11,31,12,31,179,1,32,4,32,183,8,32,11,32,12,32,
        184,1,32,1,32,4,32,189,8,32,11,32,12,32,190,1,33,1,33,1,33,1,33,
        5,33,197,8,33,10,33,12,33,200,9,33,1,33,1,33,1,34,1,34,1,34,1,34,
        5,34,208,8,34,10,34,12,34,211,9,34,1,34,1,34,1,35,4,35,216,8,35,
        11,35,12,35,217,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,7,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,4,0,10,10,13,13,34,34,
        92,92,6,0,34,34,39,39,92,92,110,110,114,114,116,116,2,0,10,10,13,
        13,3,0,9,10,13,13,32,32,228,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,77,1,0,0,0,5,
        79,1,0,0,0,7,81,1,0,0,0,9,89,1,0,0,0,11,91,1,0,0,0,13,95,1,0,0,0,
        15,101,1,0,0,0,17,103,1,0,0,0,19,109,1,0,0,0,21,111,1,0,0,0,23,113,
        1,0,0,0,25,118,1,0,0,0,27,121,1,0,0,0,29,126,1,0,0,0,31,132,1,0,
        0,0,33,134,1,0,0,0,35,136,1,0,0,0,37,138,1,0,0,0,39,140,1,0,0,0,
        41,142,1,0,0,0,43,145,1,0,0,0,45,149,1,0,0,0,47,151,1,0,0,0,49,153,
        1,0,0,0,51,155,1,0,0,0,53,158,1,0,0,0,55,161,1,0,0,0,57,164,1,0,
        0,0,59,167,1,0,0,0,61,169,1,0,0,0,63,177,1,0,0,0,65,182,1,0,0,0,
        67,192,1,0,0,0,69,203,1,0,0,0,71,215,1,0,0,0,73,74,5,118,0,0,74,
        75,5,97,0,0,75,76,5,114,0,0,76,2,1,0,0,0,77,78,5,123,0,0,78,4,1,
        0,0,0,79,80,5,125,0,0,80,6,1,0,0,0,81,82,5,112,0,0,82,83,5,114,0,
        0,83,84,5,111,0,0,84,85,5,103,0,0,85,86,5,114,0,0,86,87,5,97,0,0,
        87,88,5,109,0,0,88,8,1,0,0,0,89,90,5,59,0,0,90,10,1,0,0,0,91,92,
        5,105,0,0,92,93,5,110,0,0,93,94,5,116,0,0,94,12,1,0,0,0,95,96,5,
        102,0,0,96,97,5,108,0,0,97,98,5,111,0,0,98,99,5,97,0,0,99,100,5,
        116,0,0,100,14,1,0,0,0,101,102,5,61,0,0,102,16,1,0,0,0,103,104,5,
        112,0,0,104,105,5,114,0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,
        108,5,116,0,0,108,18,1,0,0,0,109,110,5,40,0,0,110,20,1,0,0,0,111,
        112,5,41,0,0,112,22,1,0,0,0,113,114,5,115,0,0,114,115,5,99,0,0,115,
        116,5,97,0,0,116,117,5,110,0,0,117,24,1,0,0,0,118,119,5,105,0,0,
        119,120,5,102,0,0,120,26,1,0,0,0,121,122,5,101,0,0,122,123,5,108,
        0,0,123,124,5,115,0,0,124,125,5,101,0,0,125,28,1,0,0,0,126,127,5,
        119,0,0,127,128,5,104,0,0,128,129,5,105,0,0,129,130,5,108,0,0,130,
        131,5,101,0,0,131,30,1,0,0,0,132,133,5,43,0,0,133,32,1,0,0,0,134,
        135,5,45,0,0,135,34,1,0,0,0,136,137,5,42,0,0,137,36,1,0,0,0,138,
        139,5,47,0,0,139,38,1,0,0,0,140,141,5,37,0,0,141,40,1,0,0,0,142,
        143,5,111,0,0,143,144,5,114,0,0,144,42,1,0,0,0,145,146,5,97,0,0,
        146,147,5,110,0,0,147,148,5,100,0,0,148,44,1,0,0,0,149,150,5,33,
        0,0,150,46,1,0,0,0,151,152,5,60,0,0,152,48,1,0,0,0,153,154,5,62,
        0,0,154,50,1,0,0,0,155,156,5,60,0,0,156,157,5,61,0,0,157,52,1,0,
        0,0,158,159,5,62,0,0,159,160,5,61,0,0,160,54,1,0,0,0,161,162,5,61,
        0,0,162,163,5,61,0,0,163,56,1,0,0,0,164,165,5,33,0,0,165,166,5,61,
        0,0,166,58,1,0,0,0,167,168,5,44,0,0,168,60,1,0,0,0,169,173,7,0,0,
        0,170,172,7,1,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,
        0,173,174,1,0,0,0,174,62,1,0,0,0,175,173,1,0,0,0,176,178,7,2,0,0,
        177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,
        180,64,1,0,0,0,181,183,7,2,0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,
        182,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,188,5,46,0,0,187,
        189,7,2,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,
        191,1,0,0,0,191,66,1,0,0,0,192,198,5,34,0,0,193,197,8,3,0,0,194,
        195,5,92,0,0,195,197,7,4,0,0,196,193,1,0,0,0,196,194,1,0,0,0,197,
        200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,
        198,1,0,0,0,201,202,5,34,0,0,202,68,1,0,0,0,203,204,5,47,0,0,204,
        205,5,47,0,0,205,209,1,0,0,0,206,208,8,5,0,0,207,206,1,0,0,0,208,
        211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,
        209,1,0,0,0,212,213,6,34,0,0,213,70,1,0,0,0,214,216,7,6,0,0,215,
        214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,
        219,1,0,0,0,219,220,6,35,0,0,220,72,1,0,0,0,9,0,173,179,184,190,
        196,198,209,217,1,6,0,0
    ]
>>>>>>> 095b54589d8e71e3ff675abd31840a26fc1756f4

class SimpAlgLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    ID = 31
    INT = 32
    FLOAT = 33
    STRING = 34
    Comment = 35
    WS = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'var'", "'{'", "'}'", "'program'", "';'", "'int'", "'float'", 
            "'='", "'print'", "'('", "')'", "'scan'", "'if'", "'else'", 
            "'while'", "'+'", "'-'", "'*'", "'/'", "'%'", "'or'", "'and'", 
            "'!'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "','" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "STRING", "Comment", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "ID", "INT", "FLOAT", 
                  "STRING", "Comment", "WS" ]

    grammarFileName = "SimpAlg.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
<<<<<<< HEAD
        self.checkVersion("4.7.2")
=======
        self.checkVersion("4.13.1")
>>>>>>> 095b54589d8e71e3ff675abd31840a26fc1756f4
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


