2024-02-12 21:32:29:648 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SimpAlg (RULES (RULE programa (BLOCK (ALT 'var' '{' declaracoes '}' 'program' '{' comandos '}'))) (RULE declaracoes (BLOCK (ALT (+ (BLOCK (ALT declaracao)))))) (RULE declaracao (BLOCK (ALT tipo lista_de_variaveis ';'))) (RULE tipo (BLOCK (ALT 'int') (ALT 'float'))) (RULE comandos (BLOCK (ALT (+ (BLOCK (ALT comando)))))) (RULE comando (BLOCK (ALT atribuicao) (ALT saida) (ALT entrada) (ALT condicional) (ALT repeticao))) (RULE atribuicao (BLOCK (ALT ID '=' expressao ';'))) (RULE saida (BLOCK (ALT 'print' '(' lista_de_valores ')' ';'))) (RULE entrada (BLOCK (ALT 'scan' '(' lista_de_variaveis ')' ';'))) (RULE condicional (BLOCK (ALT 'if' '(' expressao_logica ')' '{' comandos '}' (? (BLOCK (ALT 'else' '{' comandos '}')))))) (RULE repeticao (BLOCK (ALT 'while' '(' expressao_logica ')' '{' comandos '}'))) (RULE expressao (BLOCK (ALT termo (* (BLOCK (ALT (BLOCK (ALT '+') (ALT '-')) termo)))) (ALT op_unario termo))) (RULE termo (BLOCK (ALT fator (* (BLOCK (ALT (BLOCK (ALT '*') (ALT '/')) fator)))) (ALT (BLOCK (ALT INT) (ALT ID)) (* (BLOCK (ALT (BLOCK (ALT '%')) (BLOCK (ALT INT) (ALT ID)))))))) (RULE fator (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT '(' expressao ')'))) (RULE expressao_logica (BLOCK (ALT '(' expressao_logica ')') (ALT or_expr))) (RULE or_expr (BLOCK (ALT and_expr (? (BLOCK (ALT 'or' and_expr)))) (ALT or_expr (BLOCK (ALT 'or' or_expr))))) (RULE and_expr (BLOCK (ALT relacional (? (BLOCK (ALT 'and' relacional)))) (ALT and_expr (BLOCK (ALT 'and' and_expr))))) (RULE relacional (BLOCK (ALT '!' relacional) (ALT '(' relacional (? (BLOCK (ALT (BLOCK (ALT 'and') (ALT 'or')) relacional))) ')') (ALT relacional (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=') (ALT '==') (ALT '!=')) relacional))) (ALT (BLOCK (ALT ID) (ALT INT) (ALT FLOAT))))) (RULE lista_de_valores (BLOCK (ALT (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT STRING)) (* (BLOCK (ALT ',' (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT STRING)))))))) (RULE lista_de_variaveis (BLOCK (ALT ID (* (BLOCK (ALT ',' ID)))))) (RULE op_unario (BLOCK (ALT '+') (ALT '-'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["\r\n\\]))) (ALT '\\' [rnt\\"']))) '"'))) (RULE Comment (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-12 21:32:29:686 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SimpAlg (RULES (RULE programa (BLOCK (ALT 'var' '{' declaracoes '}' 'program' '{' comandos '}'))) (RULE declaracoes (BLOCK (ALT (+ (BLOCK (ALT declaracao)))))) (RULE declaracao (BLOCK (ALT tipo lista_de_variaveis ';'))) (RULE tipo (BLOCK (ALT (SET 'int' 'float')))) (RULE comandos (BLOCK (ALT (+ (BLOCK (ALT comando)))))) (RULE comando (BLOCK (ALT atribuicao) (ALT saida) (ALT entrada) (ALT condicional) (ALT repeticao))) (RULE atribuicao (BLOCK (ALT ID '=' expressao ';'))) (RULE saida (BLOCK (ALT 'print' '(' lista_de_valores ')' ';'))) (RULE entrada (BLOCK (ALT 'scan' '(' lista_de_variaveis ')' ';'))) (RULE condicional (BLOCK (ALT 'if' '(' expressao_logica ')' '{' comandos '}' (? (BLOCK (ALT 'else' '{' comandos '}')))))) (RULE repeticao (BLOCK (ALT 'while' '(' expressao_logica ')' '{' comandos '}'))) (RULE expressao (BLOCK (ALT termo (* (BLOCK (ALT (SET '+' '-') termo)))) (ALT op_unario termo))) (RULE termo (BLOCK (ALT fator (* (BLOCK (ALT (SET '*' '/') fator)))) (ALT (SET INT ID) (* (BLOCK (ALT (BLOCK (ALT '%')) (SET INT ID))))))) (RULE fator (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT '(' expressao ')'))) (RULE expressao_logica (BLOCK (ALT '(' expressao_logica ')') (ALT or_expr))) (RULE or_expr (BLOCK (ALT and_expr (? (BLOCK (ALT 'or' and_expr)))) (ALT or_expr (BLOCK (ALT 'or' or_expr))))) (RULE and_expr (BLOCK (ALT relacional (? (BLOCK (ALT 'and' relacional)))) (ALT and_expr (BLOCK (ALT 'and' and_expr))))) (RULE relacional (BLOCK (ALT '!' relacional) (ALT '(' relacional (? (BLOCK (ALT (SET 'and' 'or') relacional))) ')') (ALT relacional (BLOCK (ALT (SET '<' '>' '<=' '>=' '==' '!=') relacional))) (ALT (SET ID INT FLOAT)))) (RULE lista_de_valores (BLOCK (ALT (SET ID INT FLOAT STRING) (* (BLOCK (ALT ',' (SET ID INT FLOAT STRING))))))) (RULE lista_de_variaveis (BLOCK (ALT ID (* (BLOCK (ALT ',' ID)))))) (RULE op_unario (BLOCK (ALT (SET '+' '-')))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["\r\n\\]))) (ALT '\\' [rnt\\"']))) '"'))) (RULE Comment (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-12 21:32:29:726 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SimpAlg (RULES (RULE programa (BLOCK (ALT 'var' '{' declaracoes '}' 'program' '{' comandos '}'))) (RULE declaracoes (BLOCK (ALT (+ (BLOCK (ALT declaracao)))))) (RULE declaracao (BLOCK (ALT tipo lista_de_variaveis ';'))) (RULE tipo (BLOCK (ALT (SET 'int' 'float')))) (RULE comandos (BLOCK (ALT (+ (BLOCK (ALT comando)))))) (RULE comando (BLOCK (ALT atribuicao) (ALT saida) (ALT entrada) (ALT condicional) (ALT repeticao))) (RULE atribuicao (BLOCK (ALT ID '=' expressao ';'))) (RULE saida (BLOCK (ALT 'print' '(' lista_de_valores ')' ';'))) (RULE entrada (BLOCK (ALT 'scan' '(' lista_de_variaveis ')' ';'))) (RULE condicional (BLOCK (ALT 'if' '(' expressao_logica ')' '{' comandos '}' (? (BLOCK (ALT 'else' '{' comandos '}')))))) (RULE repeticao (BLOCK (ALT 'while' '(' expressao_logica ')' '{' comandos '}'))) (RULE expressao (BLOCK (ALT termo (* (BLOCK (ALT (SET '+' '-') termo)))) (ALT op_unario termo))) (RULE termo (BLOCK (ALT fator (* (BLOCK (ALT (SET '*' '/') fator)))) (ALT (SET INT ID) (* (BLOCK (ALT (BLOCK (ALT '%')) (SET INT ID))))))) (RULE fator (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT '(' expressao ')'))) (RULE expressao_logica (BLOCK (ALT '(' expressao_logica ')') (ALT or_expr))) (RULE or_expr (BLOCK (ALT and_expr (? (BLOCK (ALT 'or' and_expr)))) (ALT or_expr (BLOCK (ALT 'or' or_expr))))) (RULE and_expr (BLOCK (ALT relacional (? (BLOCK (ALT 'and' relacional)))) (ALT and_expr (BLOCK (ALT 'and' and_expr))))) (RULE relacional (BLOCK (ALT '!' relacional) (ALT '(' relacional (? (BLOCK (ALT (SET 'and' 'or') relacional))) ')') (ALT relacional (BLOCK (ALT (SET '<' '>' '<=' '>=' '==' '!=') relacional))) (ALT (SET ID INT FLOAT)))) (RULE lista_de_valores (BLOCK (ALT (SET ID INT FLOAT STRING) (* (BLOCK (ALT ',' (SET ID INT FLOAT STRING))))))) (RULE lista_de_variaveis (BLOCK (ALT ID (* (BLOCK (ALT ',' ID)))))) (RULE op_unario (BLOCK (ALT (SET '+' '-'))))))
2024-02-12 21:32:29:726 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SimpAlgLexer (RULES (RULE T__0 (BLOCK (ALT 'var'))) (RULE T__1 (BLOCK (ALT '{'))) (RULE T__2 (BLOCK (ALT '}'))) (RULE T__3 (BLOCK (ALT 'program'))) (RULE T__4 (BLOCK (ALT ';'))) (RULE T__5 (BLOCK (ALT 'int'))) (RULE T__6 (BLOCK (ALT 'float'))) (RULE T__7 (BLOCK (ALT '='))) (RULE T__8 (BLOCK (ALT 'print'))) (RULE T__9 (BLOCK (ALT '('))) (RULE T__10 (BLOCK (ALT ')'))) (RULE T__11 (BLOCK (ALT 'scan'))) (RULE T__12 (BLOCK (ALT 'if'))) (RULE T__13 (BLOCK (ALT 'else'))) (RULE T__14 (BLOCK (ALT 'while'))) (RULE T__15 (BLOCK (ALT '+'))) (RULE T__16 (BLOCK (ALT '-'))) (RULE T__17 (BLOCK (ALT '*'))) (RULE T__18 (BLOCK (ALT '/'))) (RULE T__19 (BLOCK (ALT '%'))) (RULE T__20 (BLOCK (ALT 'or'))) (RULE T__21 (BLOCK (ALT 'and'))) (RULE T__22 (BLOCK (ALT '!'))) (RULE T__23 (BLOCK (ALT '<'))) (RULE T__24 (BLOCK (ALT '>'))) (RULE T__25 (BLOCK (ALT '<='))) (RULE T__26 (BLOCK (ALT '>='))) (RULE T__27 (BLOCK (ALT '=='))) (RULE T__28 (BLOCK (ALT '!='))) (RULE T__29 (BLOCK (ALT ','))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["\r\n\\]))) (ALT '\\' [rnt\\"']))) '"'))) (RULE Comment (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-12 21:32:30:416 left-recursion LogManager.java:25 or_expr
    :   ( {} and_expr<tokenIndex=278> ('or'<tokenIndex=281> and_expr<tokenIndex=283>)? 
        )
        (
          {self.precpred(self._ctx, 1)}?<p=1> ('or'<tokenIndex=292> or_expr<tokenIndex=294>)
        )*
    ;
2024-02-12 21:32:30:425 grammar LogManager.java:25 added: (RULE or_expr (BLOCK (ALT (BLOCK (ALT {} (and_expr (ELEMENT_OPTIONS (= tokenIndex 278))) (? (BLOCK (ALT ('or' (ELEMENT_OPTIONS (= tokenIndex 281))) (and_expr (ELEMENT_OPTIONS (= tokenIndex 283)))))))) (* (BLOCK (ALT ({self.precpred(self._ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (BLOCK (ALT ('or' (ELEMENT_OPTIONS (= tokenIndex 292))) (or_expr (ELEMENT_OPTIONS (= tokenIndex 294)))))))))))
2024-02-12 21:32:30:498 left-recursion LogManager.java:25 and_expr
    :   ( {} relacional<tokenIndex=301> ('and'<tokenIndex=304> relacional<tokenIndex=306>)? 
        )
        (
          {self.precpred(self._ctx, 1)}?<p=1> ('and'<tokenIndex=315> and_expr<tokenIndex=317>)
        )*
    ;
2024-02-12 21:32:30:504 grammar LogManager.java:25 added: (RULE and_expr (BLOCK (ALT (BLOCK (ALT {} (relacional (ELEMENT_OPTIONS (= tokenIndex 301))) (? (BLOCK (ALT ('and' (ELEMENT_OPTIONS (= tokenIndex 304))) (relacional (ELEMENT_OPTIONS (= tokenIndex 306)))))))) (* (BLOCK (ALT ({self.precpred(self._ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (BLOCK (ALT ('and' (ELEMENT_OPTIONS (= tokenIndex 315))) (and_expr (ELEMENT_OPTIONS (= tokenIndex 317)))))))))))
2024-02-12 21:32:30:553 left-recursion LogManager.java:25 relacional
    :   ( {} '!'<tokenIndex=324> relacional<tokenIndex=326,p=4> 
        | '('<tokenIndex=330> relacional<tokenIndex=332> (('and'<tokenIndex=336>| 'or'<tokenIndex=339>) relacional<tokenIndex=342>)? ')'<tokenIndex=346> 
        | (ID<tokenIndex=383> | INT<tokenIndex=387> | FLOAT<tokenIndex=391>) 
        )
        (
          {self.precpred(self._ctx, 2)}?<p=2> (('<'<tokenIndex=354> | '>'<tokenIndex=358> | '<='<tokenIndex=362> | '>='<tokenIndex=366> | '=='<tokenIndex=370> | '!='<tokenIndex=374>) relacional<tokenIndex=377>)
        )*
    ;
2024-02-12 21:32:30:561 grammar LogManager.java:25 added: (RULE relacional (BLOCK (ALT (BLOCK (ALT {} ('!' (ELEMENT_OPTIONS (= tokenIndex 324))) (relacional (ELEMENT_OPTIONS (= tokenIndex 326) (= p 4)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 330))) (relacional (ELEMENT_OPTIONS (= tokenIndex 332))) (? (BLOCK (ALT (SET ('and' (ELEMENT_OPTIONS (= tokenIndex 336))) ('or' (ELEMENT_OPTIONS (= tokenIndex 339)))) (relacional (ELEMENT_OPTIONS (= tokenIndex 342)))))) (')' (ELEMENT_OPTIONS (= tokenIndex 346)))) (ALT (SET (ID (ELEMENT_OPTIONS (= tokenIndex 383))) (INT (ELEMENT_OPTIONS (= tokenIndex 387))) (FLOAT (ELEMENT_OPTIONS (= tokenIndex 391)))))) (* (BLOCK (ALT ({self.precpred(self._ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (BLOCK (ALT (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 354))) ('>' (ELEMENT_OPTIONS (= tokenIndex 358))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 362))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 366))) ('==' (ELEMENT_OPTIONS (= tokenIndex 370))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 374)))) (relacional (ELEMENT_OPTIONS (= tokenIndex 377)))))))))))
2024-02-12 21:32:30:566 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, ID=31, INT=32, FLOAT=33, STRING=34, Comment=35, WS=36}
2024-02-12 21:32:30:566 semantics LogManager.java:25 strings={'var'=1, '{'=2, '}'=3, 'program'=4, ';'=5, 'int'=6, 'float'=7, '='=8, 'print'=9, '('=10, ')'=11, 'scan'=12, 'if'=13, 'else'=14, 'while'=15, '+'=16, '-'=17, '*'=18, '/'=19, '%'=20, 'or'=21, 'and'=22, '!'=23, '<'=24, '>'=25, '<='=26, '>='=27, '=='=28, '!='=29, ','=30}
2024-02-12 21:32:30:589 LL1 LogManager.java:25 
DECISION 0 in rule declaracoes
2024-02-12 21:32:30:589 LL1 LogManager.java:25 look=[{6..7}, 3]
2024-02-12 21:32:30:589 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:589 LL1 LogManager.java:25 
DECISION 1 in rule comandos
2024-02-12 21:32:30:590 LL1 LogManager.java:25 look=[{9, 12..13, 15, 31}, 3]
2024-02-12 21:32:30:590 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:590 LL1 LogManager.java:25 
DECISION 2 in rule comando
2024-02-12 21:32:30:590 LL1 LogManager.java:25 look=[31, 9, 12, 13, 15]
2024-02-12 21:32:30:590 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:590 LL1 LogManager.java:25 
DECISION 3 in rule condicional
2024-02-12 21:32:30:590 LL1 LogManager.java:25 look=[14, {3, 9, 12..13, 15, 31}]
2024-02-12 21:32:30:590 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:590 LL1 LogManager.java:25 
DECISION 4 in rule expressao
2024-02-12 21:32:30:590 LL1 LogManager.java:25 look=[{16..17}, {5, 11}]
2024-02-12 21:32:30:591 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:591 LL1 LogManager.java:25 
DECISION 5 in rule expressao
2024-02-12 21:32:30:591 LL1 LogManager.java:25 look=[{10, 31..33}, {16..17}]
2024-02-12 21:32:30:591 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:591 LL1 LogManager.java:25 
DECISION 6 in rule termo
2024-02-12 21:32:30:591 LL1 LogManager.java:25 look=[{18..19}, {5, 11, 16..17}]
2024-02-12 21:32:30:591 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:591 LL1 LogManager.java:25 
DECISION 7 in rule termo
2024-02-12 21:32:30:591 LL1 LogManager.java:25 look=[20, {5, 11, 16..17}]
2024-02-12 21:32:30:591 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:591 LL1 LogManager.java:25 
DECISION 8 in rule termo
2024-02-12 21:32:30:592 LL1 LogManager.java:25 look=[{10, 31..33}, {31..32}]
2024-02-12 21:32:30:592 LL1 LogManager.java:25 LL(1)? false
2024-02-12 21:32:30:592 LL1 LogManager.java:25 
DECISION 9 in rule fator
2024-02-12 21:32:30:592 LL1 LogManager.java:25 look=[31, 32, 33, 10]
2024-02-12 21:32:30:592 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:592 LL1 LogManager.java:25 
DECISION 10 in rule expressao_logica
2024-02-12 21:32:30:592 LL1 LogManager.java:25 look=[10, {10, 23, 31..33}]
2024-02-12 21:32:30:592 LL1 LogManager.java:25 LL(1)? false
2024-02-12 21:32:30:592 LL1 LogManager.java:25 
DECISION 11 in rule or_expr
2024-02-12 21:32:30:592 LL1 LogManager.java:25 look=[21, null]
2024-02-12 21:32:30:592 LL1 LogManager.java:25 LL(1)? false
2024-02-12 21:32:30:592 LL1 LogManager.java:25 
DECISION 12 in rule or_expr
2024-02-12 21:32:30:593 LL1 LogManager.java:25 look=[null, null]
2024-02-12 21:32:30:593 LL1 LogManager.java:25 LL(1)? false
2024-02-12 21:32:30:593 LL1 LogManager.java:25 
DECISION 13 in rule and_expr
2024-02-12 21:32:30:593 LL1 LogManager.java:25 look=[22, null]
2024-02-12 21:32:30:593 LL1 LogManager.java:25 LL(1)? false
2024-02-12 21:32:30:593 LL1 LogManager.java:25 
DECISION 14 in rule and_expr
2024-02-12 21:32:30:593 LL1 LogManager.java:25 look=[null, null]
2024-02-12 21:32:30:593 LL1 LogManager.java:25 LL(1)? false
2024-02-12 21:32:30:593 LL1 LogManager.java:25 
DECISION 15 in rule relacional
2024-02-12 21:32:30:593 LL1 LogManager.java:25 look=[{21..22}, 11]
2024-02-12 21:32:30:593 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:593 LL1 LogManager.java:25 
DECISION 16 in rule relacional
2024-02-12 21:32:30:593 LL1 LogManager.java:25 look=[23, 10, {31..33}]
2024-02-12 21:32:30:593 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:593 LL1 LogManager.java:25 
DECISION 17 in rule relacional
2024-02-12 21:32:30:594 LL1 LogManager.java:25 look=[null, null]
2024-02-12 21:32:30:594 LL1 LogManager.java:25 LL(1)? false
2024-02-12 21:32:30:594 LL1 LogManager.java:25 
DECISION 18 in rule lista_de_valores
2024-02-12 21:32:30:594 LL1 LogManager.java:25 look=[30, 11]
2024-02-12 21:32:30:594 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:594 LL1 LogManager.java:25 
DECISION 19 in rule lista_de_variaveis
2024-02-12 21:32:30:594 LL1 LogManager.java:25 look=[30, {5, 11}]
2024-02-12 21:32:30:594 LL1 LogManager.java:25 LL(1)? true
2024-02-12 21:32:30:711 action-translator LogManager.java:25 translate 
2024-02-12 21:32:30:713 action-translator LogManager.java:25 translate self.precpred(self._ctx, 1)
2024-02-12 21:32:30:717 action-translator LogManager.java:25 translate self.precpred(self._ctx, 1)
2024-02-12 21:32:30:718 action-translator LogManager.java:25 translate 
2024-02-12 21:32:30:718 action-translator LogManager.java:25 translate self.precpred(self._ctx, 1)
2024-02-12 21:32:30:719 action-translator LogManager.java:25 translate self.precpred(self._ctx, 1)
2024-02-12 21:32:30:720 action-translator LogManager.java:25 translate 
2024-02-12 21:32:30:722 action-translator LogManager.java:25 translate self.precpred(self._ctx, 2)
2024-02-12 21:32:30:723 action-translator LogManager.java:25 translate self.precpred(self._ctx, 2)
